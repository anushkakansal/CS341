**CHAPTER 1**
1. 
include <unistd.h>
int main() {
  write(1, "Hi! My name is Anushka", 22)
  return 0
}
2.
#include <unistd.h>
void write_triangle(int n) {
	int i;
	for (i = 0; i < n; i++) {
		int j;
		for (j = 0; j <= i; j++) {
			write(1, "*", 1);
		}
		write(2, "\n", 1);
	}
}
3. 
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
int main() {
	int file_des = open("hello_world.txt", O_CREAT | O_TRUNC | O_RDWR);
	write(file_des, "Hi! My name is Anushka", 22);
	close(file_des);
}
4. 
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int main(){
	int fildes = open("hello_world.txt", O_CREAT | O_TRUNC | O_RDWR);
	dprintf(3, "Hi! My name is Anushka");
	close(fildes);
}
5. Printf() can be used to format the text using %d for integers but write() does not provide any formatting capabilities. Also, printf() writes to the 
console but write() writes to the file. Lastly, printf() has a buffer. 

**CHAPTER 2**
1. There are at least 8 bits in one byte.
2. Char is one byte or 8 bits. 
3. Int has 4 bits; double has 8 bits; float has 4 bits; long has 4 bits; long long has 8 bits. 
4. The address of (data+2) = 0x7fbd9d48.
5. data + 3 is equal to data[3]
6. Constants in the memory can only be read and not written to and that is why we get a segmentation fault. 
7. sizeof("Hello\0World") returns 12.
8. strlen("Hello\0World") return 5 because it stops counting as soon as it hits the ending \0.
9. "Hi" would give sizeOf() as 3.
10. sizeOf(1) could give 4 or 8 depending on the machine because it could be interpretted as an int or a double.

**CHAPTER 3**
1. The two ways to return the length of argv is (a) use argc, which is the first parameter of main function (b) using a while loop using a variable 
count such as
(argv[count] != NULL) {
	count ++;
} and then returning count. 
2. The first entry is always the execution name of the program. 
3. The environment variables are stored somewhere else.
4. sizeOf(ptr) is 8 because it is a char pointer with 4 bits that is what will be returned. However for sizeOf(array) will return 6 because that is the
length of the array + 1 for the extra null space at the end of the sentence. 
5. Stack manages the lifetime of automatic variables. 

**CHAPTER 4**
1. We can use malloc() to manage the data's lifetime. This can be done using char* result = malloc(memory needed in bytes).
2. Heap is used for dynamic memory location giving user the ability to allocate and deallocate the memory as needed, but stack is used for management of 
function calls and local variables. Additionally, memory management in stack is automatic and is last in first out order but on heap it is manual. Data on
stack is faster to access than heap.
3. Yes, there is other kinds of memory in a process such as Text Segment, Initialized Data Segment and Uninitialized Data Segment.
4. In a good C program, for every malloc, there is a free(). 
5. malloc can fail if our program has used up all of the heap memory.
6. For time() it returns a time_t but for ctime() it returns a pointer to a string. Lastly, time() is for getting the current time and ctime() is for 
converting it to a string.
7. The pointer was freed twice and was not set to NULL.
8. Trying to access the pointer even though it has been freed.
9. Free the pointer and then immediately set it to NULL.
10. 
